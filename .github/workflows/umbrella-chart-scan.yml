name: Helm Umbrella Chart Security Scan

on:
  workflow_dispatch:

env:
  HELM_CHART_PATH: "./charts/podiumd"  # Adjust to your umbrella chart path
  RENDERED_OUTPUT_PATH: "./rendered-manifests"
  FAIL_ON_VULNERABILITY: "false"  # Set to "true" to fail workflow on critical/high vulnerabilities

# ℹ️ Repository Configuration:
# This workflow includes the specific repositories required for the podiumd chart.
# For additional repositories, create a repositories.yaml file in your chart directory.

# 🔧 Template Rendering Issues:
# If templates fail to render due to missing values (like "Valid .Values.notificationsSecretKey entry required!"):
# 1. Create a security-scan-values.yaml file in your chart directory:
#    # security-scan-values.yaml - values for security scanning only
#    notificationsSecretKey: "dummy-key-for-scanning"
#    database:
#      password: "dummy-password-for-scanning"
#    # Add other required values based on error messages
# 2. The workflow will automatically use this file if present

jobs:
  prepare-scan:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.extract-images.outputs.images }}
      matrix: ${{ steps.extract-images.outputs.matrix }}
      chart-name: ${{ steps.chart-info.outputs.chart-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Setup yq
        uses: mikefarah/yq@v4

      - name: Add dependency chart repos
        run: |
          echo "📚 Adding required Helm repositories for podiumd chart..."
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add maykinmedia https://maykinmedia.github.io/charts
          helm repo add opentelemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo add wiremind https://wiremind.github.io/wiremind-helm-charts
          helm repo add dimpact https://Dimpact-Samenwerking.github.io/helm-charts
          helm repo add elastic https://helm.elastic.co
          helm repo add kiss-frontend https://raw.githubusercontent.com/Klantinteractie-Servicesysteem/KISS-frontend/main/helm
          helm repo add kiss-adapter https://raw.githubusercontent.com/ICATT-Menselijk-Digitaal/podiumd-adapter/main/helm
          helm repo add kiss-elastic https://raw.githubusercontent.com/Klantinteractie-Servicesysteem/.github/main/docs/scripts/elastic
          helm repo add zac https://infonl.github.io/dimpact-zaakafhandelcomponent/
          helm repo add openshift https://charts.openshift.io
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          
          echo "🔄 Updating repository information..."
          helm repo update
          
          echo "📋 Available repositories:"
          helm repo list

      - name: Add additional repositories (fallback)
        run: |
          echo "📚 Adding additional common repositories as fallback..."
          
          # Check if there's a repositories.yaml file in the chart directory for additional repos
          if [ -f "${{ env.HELM_CHART_PATH }}/repositories.yaml" ]; then
            echo "📄 Found repositories.yaml, adding additional repositories from file..."
            while IFS= read -r line; do
              if [[ $line =~ ^[[:space:]]*-[[:space:]]*name:[[:space:]]*(.+) ]]; then
                repo_name=$(echo "$line" | sed 's/.*name:[[:space:]]*//' | tr -d '"' | tr -d "'")
              elif [[ $line =~ ^[[:space:]]*url:[[:space:]]*(.+) ]] && [ -n "$repo_name" ]; then
                repo_url=$(echo "$line" | sed 's/.*url:[[:space:]]*//' | tr -d '"' | tr -d "'")
                echo "📌 Adding additional repository: $repo_name -> $repo_url"
                helm repo add "$repo_name" "$repo_url" || echo "⚠️ Failed to add $repo_name (might already exist)"
                repo_name=""
              fi
            done < "${{ env.HELM_CHART_PATH }}/repositories.yaml"
            
            echo "🔄 Updating repository information..."
            helm repo update || echo "⚠️ Some repositories failed to update"
          fi
          
          # Parse Chart.yaml dependencies to find any additional required repositories
          echo "🔍 Analyzing Chart.yaml for additional repository dependencies..."
          cd "${{ env.HELM_CHART_PATH }}"
          
          if [ -f "Chart.yaml" ]; then
            # Extract repository URLs from Chart.yaml dependencies that aren't already added
            yq eval '.dependencies[].repository' Chart.yaml 2>/dev/null | while read -r repo_url; do
              if [[ "$repo_url" != "null" && "$repo_url" =~ ^https?:// ]]; then
                # Check if this repo is already added by checking if the URL is in helm repo list
                if ! helm repo list | grep -q "$repo_url"; then
                  # Extract a reasonable name from the URL
                  repo_name=$(basename "$repo_url" | sed 's/[^a-zA-Z0-9-]//g' | tr '[:upper:]' '[:lower:]')
                  if [ -n "$repo_name" ] && [ "$repo_name" != "null" ]; then
                    echo "📌 Adding missing repository from Chart.yaml: $repo_name -> $repo_url"
                    helm repo add "$repo_name" "$repo_url" || echo "⚠️ Failed to add $repo_name"
                  fi
                fi
              fi
            done
          fi

      - name: Get chart information
        id: chart-info
        run: |
          cd ${{ env.HELM_CHART_PATH }}
          if ! chart_name=$(yq eval '.name' Chart.yaml); then
            echo "❌ Failed to extract chart name from Chart.yaml"
            exit 1
          fi
          echo "chart-name=${chart_name}" >> $GITHUB_OUTPUT
          echo "📋 Detected chart name: ${chart_name}"

      - name: Lint Helm chart
        run: |
          cd ${{ env.HELM_CHART_PATH }}
          echo "🔍 Linting Helm chart..."
          if ! helm lint . --strict; then
            echo "❌ Helm chart linting failed"
            exit 1
          fi

      - name: Cache Helm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HELM_CHART_PATH }}/charts
            ~/.cache/helm
          key: helm-deps-${{ hashFiles(format('{0}/Chart.yaml', env.HELM_CHART_PATH), format('{0}/Chart.lock', env.HELM_CHART_PATH), format('{0}/repositories.yaml', env.HELM_CHART_PATH)) }}
          restore-keys: |
            helm-deps-

      - name: Update Helm dependencies
        run: |
          cd ${{ env.HELM_CHART_PATH }}
          echo "📦 Updating Helm dependencies..."
          
          # Show which repositories are referenced in Chart.yaml
          if [ -f "Chart.yaml" ]; then
            echo "🔍 Dependencies in Chart.yaml:"
            yq eval '.dependencies[] | .name + " from " + .repository' Chart.yaml 2>/dev/null || echo "No dependencies found"
          fi
          
          # Attempt to update dependencies with better error handling
          if ! helm dependency update; then
            echo ""
            echo "❌ Failed to update Helm dependencies!"
            echo ""
            echo "🔧 Troubleshooting steps:"
            echo "1. Check that all required repositories are added above"
            echo "2. Verify Chart.yaml dependency syntax"
            echo "3. Ensure repository URLs are accessible"
            echo ""
            echo "💡 To fix missing repositories, you can:"
            echo "   - Add a 'repositories.yaml' file to your chart directory with:"
            echo "     repositories:"
            echo "       - name: your-repo-name"
            echo "         url: https://your-repo-url.com"
            echo "   - Or update the common_repos array in this workflow"
            echo ""
            echo "📋 Currently available repositories:"
            helm repo list || echo "No repositories available"
            echo ""
            echo "🔍 Required repositories from Chart.yaml:"
            yq eval '.dependencies[].repository' Chart.yaml 2>/dev/null | sort -u || echo "Could not parse Chart.yaml"
            
            exit 1
          fi
          
      - name: Render Helm templates
        run: |
          cd ${{ env.HELM_CHART_PATH }}
          mkdir -p ../${{ env.RENDERED_OUTPUT_PATH }}
          chart_name="${{ steps.chart-info.outputs.chart-name }}"
          
          echo "🏗️ Rendering Helm templates..."
          
          # Check if there's a security-scan-values.yaml file for scanning purposes
          scan_values_args=""
          if [ -f "security-scan-values.yaml" ]; then
            echo "📄 Found security-scan-values.yaml - using for template rendering"
            scan_values_args="--values security-scan-values.yaml"
          elif [ -f "values-dev.yaml" ]; then
            echo "📄 Found values-dev.yaml - using for template rendering"
            scan_values_args="--values values-dev.yaml"
          elif [ -f "values-test.yaml" ]; then
            echo "📄 Found values-test.yaml - using for template rendering"
            scan_values_args="--values values-test.yaml"
          else
            echo "📄 Using default values.yaml for template rendering"
          fi
          
          # Try to render templates with error handling
          if helm template "${chart_name}" . \
            $scan_values_args \
            --output-dir ../${{ env.RENDERED_OUTPUT_PATH }}/default \
            --include-crds; then
            echo "✅ Helm templates rendered successfully"
          else
            echo "❌ Failed to render Helm templates with default approach"
            echo ""
            echo "🔧 Attempting template rendering with relaxed validation..."
            
            # Try with --dry-run to get more information
            echo "🔍 Checking template issues:"
            helm template "${chart_name}" . $scan_values_args --dry-run || true
            
            echo ""
            echo "🛠️ Attempting to render with minimal required values..."
            
            # Create a minimal values file for scanning purposes
            echo "# Minimal values for security scanning purposes" > scan-minimal-values.yaml
            echo "# Add any required values that templates need to render successfully" >> scan-minimal-values.yaml
            echo "" >> scan-minimal-values.yaml
            echo "# Common required values - adjust based on your chart needs:" >> scan-minimal-values.yaml
            echo "global:" >> scan-minimal-values.yaml
            echo "  # Add global values if needed" >> scan-minimal-values.yaml
            echo "" >> scan-minimal-values.yaml
            echo "# Fix for common missing values:" >> scan-minimal-values.yaml
            echo "notificationsSecretKey: \"dummy-key-for-scanning\"" >> scan-minimal-values.yaml
            echo "database:" >> scan-minimal-values.yaml
            echo "  password: \"dummy-password-for-scanning\"" >> scan-minimal-values.yaml
            echo "auth:" >> scan-minimal-values.yaml
            echo "  secret: \"dummy-secret-for-scanning\"" >> scan-minimal-values.yaml
            echo "" >> scan-minimal-values.yaml
            echo "# Add your chart-specific required values here based on error messages" >> scan-minimal-values.yaml
            echo "# Example for zac chart:" >> scan-minimal-values.yaml
            echo "zac:" >> scan-minimal-values.yaml
            echo "  notificationsSecretKey: \"dummy-key-for-scanning\"" >> scan-minimal-values.yaml
            echo "" >> scan-minimal-values.yaml
            echo "# Example for other common required values:" >> scan-minimal-values.yaml
            echo "# rabbitmq:" >> scan-minimal-values.yaml
            echo "#   auth:" >> scan-minimal-values.yaml
            echo "#     password: \"dummy-password-for-scanning\"" >> scan-minimal-values.yaml
            echo "# redis:" >> scan-minimal-values.yaml
            echo "#   auth:" >> scan-minimal-values.yaml
            echo "#     password: \"dummy-password-for-scanning\"" >> scan-minimal-values.yaml

            # Try again with minimal values
            if helm template "${chart_name}" . \
              --values scan-minimal-values.yaml \
              $scan_values_args \
              --output-dir ../${{ env.RENDERED_OUTPUT_PATH }}/default \
              --include-crds; then
              echo "✅ Templates rendered successfully with minimal values"
            else
              echo "❌ Template rendering failed even with minimal values"
              echo ""
              echo "💡 To fix this issue:"
              echo "1. Create a 'security-scan-values.yaml' file in your chart directory with required values"
              echo "2. Or update the 'scan-minimal-values.yaml' section in this workflow"
              echo "3. Check the error above to see which values are missing"
              echo ""
              echo "🔍 The error typically indicates missing required values in templates."
              echo "   For security scanning, you can provide dummy/placeholder values."
              echo ""
              echo "📋 Example security-scan-values.yaml:"
              echo "---"
              echo "# Values file specifically for security scanning"
              echo "# These don't need to be real secrets, just valid strings"
              echo "notificationsSecretKey: \"dummy-key-for-scanning\""
              echo "database:"
              echo "  password: \"dummy-password-for-scanning\""
              echo "# Add other required values based on the error messages"
              echo ""
              
              # Don't exit here - continue with partial scanning if possible
              echo "⚠️ Continuing with partial scan using available rendered templates..."
            fi
          fi
          
          # Check what was actually rendered
          if [ -d "../${{ env.RENDERED_OUTPUT_PATH }}/default" ]; then
            rendered_files=$(find ../${{ env.RENDERED_OUTPUT_PATH }}/default -name "*.yaml" | wc -l)
            echo "📊 Successfully rendered $rendered_files YAML files"
            
            if [ "$rendered_files" -eq 0 ]; then
              echo "⚠️ No YAML files were rendered - this will limit security scanning"
              echo "💡 Consider providing the missing values to enable full scanning"
            fi
          else
            echo "⚠️ No rendered templates directory created"
            mkdir -p ../${{ env.RENDERED_OUTPUT_PATH }}/default
            echo "# No templates could be rendered due to missing values" > ../${{ env.RENDERED_OUTPUT_PATH }}/default/README.md
          fi

      - name: Redact potential secrets
        run: |
          echo "🔒 Scanning for potential secrets in rendered manifests..."
          secrets_found=false
          
          # Check for obvious secret patterns
          if grep -r -i -E 'password:|secret:|token:|key:|apikey:' ${{ env.RENDERED_OUTPUT_PATH }} || true; then
            echo "⚠️ Potential secrets found in rendered manifests (keyword patterns)"
            secrets_found=true
          fi
          
          # Check for suspicious base64 data in data fields (common in secrets)
          if grep -r -i 'data:' ${{ env.RENDERED_OUTPUT_PATH }} | grep -E '([A-Za-z0-9+/=]{20,})' || true; then
            echo "⚠️ Potential base64-encoded secrets found in data fields"
            secrets_found=true
          fi
          
          if [ "$secrets_found" = true ]; then
            echo "🔍 Consider using external secret management (e.g., sealed-secrets, external-secrets-operator)"
            echo "📝 Review rendered manifests for accidentally exposed secrets"
          else
            echo "✅ No obvious secrets detected in rendered manifests"
          fi

      - name: Extract container images
        id: extract-images
        run: |
          echo "🔍 Extracting container images from rendered manifests..."
          
          # Create temp files
          touch extracted_images.txt final_images.txt
          
          # Check if we have any rendered files to scan
          if [ ! -d "${{ env.RENDERED_OUTPUT_PATH }}" ] || [ -z "$(find ${{ env.RENDERED_OUTPUT_PATH }} -name "*.yaml" 2>/dev/null)" ]; then
            echo "⚠️ No rendered YAML files found for image extraction"
            echo "🔧 This usually means template rendering failed due to missing values"
            
            # Set empty outputs
            echo "images=[]" >> $GITHUB_OUTPUT
            echo "matrix=[]" >> $GITHUB_OUTPUT
            
            echo "💡 To enable container image scanning:"
            echo "1. Fix the template rendering issues above"
            echo "2. Provide required values in security-scan-values.yaml"
            echo "3. Re-run the workflow"
            
            exit 0
          fi
          
          # Find all container images in rendered YAML files
          find ${{ env.RENDERED_OUTPUT_PATH }} -name "*.yaml" -exec grep -h "image:" {} \; | \
            sed 's/.*image: *["'\'']*\([^"'\'']*\)["'\'']*$/\1/' | \
            grep -v "^$" | \
            sort -u > extracted_images.txt
            
          # Also check for images in initContainers
          find ${{ env.RENDERED_OUTPUT_PATH }} -name "*.yaml" -exec grep -A 10 "initContainers:" {} \; | \
            grep "image:" | \
            sed 's/.*image: *["'\'']*\([^"'\'']*\)["'\'']*$/\1/' | \
            grep -v "^$" >> extracted_images.txt
          
          # Remove duplicates and filter out invalid entries
          sort -u extracted_images.txt | grep -E '^[a-zA-Z0-9][a-zA-Z0-9._/-]*:[a-zA-Z0-9._-]+

      - name: Upload rendered manifests
        uses: actions/upload-artifact@v4
        with:
          name: rendered-manifests
          path: ${{ env.RENDERED_OUTPUT_PATH }}
          retention-days: 1
          compression-level: 9

  scan-images:
    needs: prepare-scan
    runs-on: ubuntu-latest
    if: needs.prepare-scan.outputs.images != '[]'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare-scan.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ github.run_id }}
          restore-keys: |
            trivy-db-

      - name: Scan container images for vulnerabilities
        run: |
          mkdir -p scan-results sbom-results
          
          # Convert matrix images to newline-separated format
          echo '${{ toJson(matrix.images) }}' | jq -r '.[]' > images_to_scan.txt
          
          echo "🔍 Scanning images in chunk ${{ matrix.chunk }}:"
          cat images_to_scan.txt
          
          # Scan each image
          while IFS= read -r image; do
            if [ -n "$image" ]; then
              echo "🔎 Scanning image: $image"
              
              # Create safe filename
              safe_name=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
              
              # Vulnerability scan with SARIF output
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/scan-results:/output" \
                aquasec/trivy:latest image \
                --format sarif \
                --output "/output/${safe_name}.sarif" \
                --severity HIGH,CRITICAL \
                --ignore-unfixed \
                --timeout 10m \
                "$image" || echo "❌ Failed to scan $image"
                
              # JSON output for summary
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/scan-results:/output" \
                aquasec/trivy:latest image \
                --format json \
                --output "/output/${safe_name}.json" \
                --severity HIGH,CRITICAL \
                --ignore-unfixed \
                --timeout 10m \
                "$image" || echo "❌ Failed to scan $image (JSON)"
                
              # Generate SBOM (SPDX format)
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/sbom-results:/output" \
                aquasec/trivy:latest image \
                --format spdx-json \
                --output "/output/${safe_name}-sbom-spdx.json" \
                "$image" || echo "❌ Failed to generate SPDX SBOM for $image"
                
              # Generate SBOM (CycloneDX format for broader tool compatibility)
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/sbom-results:/output" \
                aquasec/trivy:latest image \
                --format cyclonedx \
                --output "/output/${safe_name}-sbom-cyclone.json" \
                "$image" || echo "❌ Failed to generate CycloneDX SBOM for $image"
            fi
          done < images_to_scan.txt

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-chunk-${{ matrix.chunk }}
          path: scan-results/
          retention-days: 30
          compression-level: 9

      - name: Upload SBOM results
        uses: actions/upload-artifact@v4
        with:
          name: sbom-results-chunk-${{ matrix.chunk }}
          path: sbom-results/
          retention-days: 90
          compression-level: 9

  consolidate-results:
    needs: [prepare-scan, scan-images]
    runs-on: ubuntu-latest
    if: always() && (needs.scan-images.result == 'success' || needs.scan-images.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          pattern: scan-results-chunk-*
          merge-multiple: true
          path: all-scan-results/

      - name: Download all SBOM results
        uses: actions/download-artifact@v4
        with:
          pattern: sbom-results-chunk-*
          merge-multiple: true
          path: all-sbom-results/

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install jq
          npm install -g @microsoft/sarif-multitool

      - name: Consolidate results
        run: |
          mkdir -p consolidated-image-results
          
          # Check if we have scan results to consolidate
          if [ "${{ needs.prepare-scan.outputs.images }}" = "[]" ]; then
            echo "⚠️ No container images were found to scan"
            echo "🔧 This typically means template rendering failed due to missing values"
            
            # Create informative summary for no images case
            {
              echo "# ⚠️ Container Vulnerability Scan Summary"
              echo ""
              echo "**Chart:** ${{ needs.prepare-scan.outputs.chart-name }}"
              echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
              echo "**Trigger:** ${{ github.event_name }}"
              echo "**Status:** No container images found for scanning"
              echo ""
              echo "## 🔧 Issue"
              echo ""
              echo "No container images could be extracted from the Helm chart templates."
              echo "This typically occurs when:"
              echo ""
              echo "- **Template rendering failed** due to missing required values"
              echo "- **Chart contains no container workloads** (e.g., only ConfigMaps, Secrets)"
              echo "- **Images are referenced in an unexpected format**"
              echo ""
              echo "## 💡 How to Fix"
              echo ""
              echo "1. **Check the template rendering step** in this workflow run for error messages"
              echo "2. **Create a \`security-scan-values.yaml\`** file in your chart directory with required values:"
              echo ""
              echo "\`\`\`yaml"
              echo "# security-scan-values.yaml"
              echo "# Values for security scanning - can use dummy/placeholder values"
              echo "notificationsSecretKey: \"dummy-key-for-scanning\""
              echo "database:"
              echo "  password: \"dummy-password-for-scanning\""
              echo "# Add other required values based on error messages"
              echo "\`\`\`"
              echo ""
              echo "3. **Re-run the workflow** after adding the missing values"
              echo ""
              echo "## 📎 Available Scans"
              echo ""
              echo "- 🛡️ [Helm Configuration Scan](https://github.com/${{ github.repository }}/security/code-scanning) (still available)"
              echo ""
              echo "---"
              echo "*Automated scan by [Helm Security Workflow](https://github.com/${{ github.repository }}/actions/workflows/${{ github.workflow }})*"
            } > consolidated-image-results/summary.md
            
            # Create empty SARIF file
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": []}' > consolidated-image-results/umbrella-chart-scan.sarif
            
            exit 0
          fi
          
          # Find all SARIF files
          find all-scan-results -name "*.sarif" > sarif_files.txt
          
          # Initialize vulnerability counters for workflow failure logic
          total_critical=0
          total_high=0
          
          if [ -s sarif_files.txt ]; then
            echo "📊 Consolidating SARIF files:"
            cat sarif_files.txt
            
            # Merge all SARIF files into one
            sarif merge $(cat sarif_files.txt) --output-file consolidated-image-results/umbrella-chart-scan.sarif
            
            # Create consolidated SBOM tarball with both formats
            if [ -d "all-sbom-results" ] && [ "$(ls -A all-sbom-results)" ]; then
              echo "📦 Creating consolidated SBOM archive..."
              tar -czf consolidated-image-results/all-sboms.tar.gz -C all-sbom-results .
              spdx_count=$(find all-sbom-results -name "*-sbom-spdx.json" | wc -l)
              cyclone_count=$(find all-sbom-results -name "*-sbom-cyclone.json" | wc -l)
              echo "✅ Archived ${spdx_count} SPDX and ${cyclone_count} CycloneDX SBOM files"
            fi
            
            # Create detailed summary
            {
              echo "# 🔍 Container Vulnerability Scan Summary"
              echo ""
              echo "**Chart:** ${{ needs.prepare-scan.outputs.chart-name }}"
              echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
              echo "**Trigger:** ${{ github.event_name }}"
              echo ""
              echo "## 📋 Results by Image"
              echo ""
              echo "| Image | Critical | High | Total | SPDX SBOM | CycloneDX SBOM |"
              echo "|-------|----------|------|-------|-----------|----------------|"
            } > consolidated-image-results/summary.md
            
            # Process JSON results for summary
            for json_file in all-scan-results/*.json; do
              if [ -f "$json_file" ]; then
                # Reconstruct image name from filename
                base_name=$(basename "$json_file" .json)
                image_name=$(echo "$base_name" | sed 's/_/\//g; s/\//:/1')
                
                critical=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$json_file" 2>/dev/null || echo "0")
                high=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$json_file" 2>/dev/null || echo "0")
                total=$((critical + high))
                
                # Add to global counters
                total_critical=$((total_critical + critical))
                total_high=$((total_high + high))
                
                # Check if SBOMs exist
                spdx_file="all-sbom-results/${base_name}-sbom-spdx.json"
                cyclone_file="all-sbom-results/${base_name}-sbom-cyclone.json"
                
                if [ -f "$spdx_file" ]; then
                  spdx_link="✅ \`${base_name}-sbom-spdx.json\`"
                else
                  spdx_link="❌"
                fi
                
                if [ -f "$cyclone_file" ]; then
                  cyclone_link="✅ \`${base_name}-sbom-cyclone.json\`"
                else
                  cyclone_link="❌"
                fi
                
                echo "| \`$image_name\` | $critical | $high | $total | $spdx_link | $cyclone_link |" >> consolidated-image-results/summary.md
              fi
            done
            
            {
              echo ""
              echo "## 🚨 Summary Totals"
              echo ""
              echo "- **Total Critical:** $total_critical"
              echo "- **Total High:** $total_high"
              echo "- **Overall Total:** $((total_critical + total_high))"
              echo ""
              echo "## 📎 Artifacts"
              echo ""
              echo "- 🔍 [Consolidated SARIF Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
              echo "- 📦 [All SBOMs Archive (all-sboms.tar.gz)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
              echo "- 🛡️ [Security Tab Results](https://github.com/${{ github.repository }}/security/code-scanning)"
              echo ""
              if [ -f "consolidated-image-results/all-sboms.tar.gz" ]; then
                echo "### 📋 SBOM Files Included:"
                echo "\`\`\`"
                tar -tzf consolidated-image-results/all-sboms.tar.gz | head -20
                if [ $(tar -tzf consolidated-image-results/all-sboms.tar.gz | wc -l) -gt 20 ]; then
                  echo "... and $(($(tar -tzf consolidated-image-results/all-sboms.tar.gz | wc -l) - 20)) more files"
                fi
                echo "\`\`\`"
                echo ""
              fi
              echo "---"
              echo "*Automated scan by [Helm Security Workflow](https://github.com/${{ github.repository }}/actions/workflows/${{ github.workflow }})*"
            } >> consolidated-image-results/summary.md
            
          else
            echo "⚠️ No SARIF files found to consolidate"
            # Create empty SARIF file
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": []}' > consolidated-image-results/umbrella-chart-scan.sarif
            echo "# ✅ No vulnerabilities found in container images" > consolidated-image-results/summary.md
          fi
          
          # Optional workflow failure on vulnerabilities
          if [ "${{ env.FAIL_ON_VULNERABILITY }}" = "true" ]; then
            if [ "$total_critical" -gt 0 ] || [ "$total_high" -gt 0 ]; then
              echo "❌ FAIL_ON_VULNERABILITY is enabled and vulnerabilities were found:"
              echo "   Critical: $total_critical, High: $total_high"
              echo "🛡️ Please resolve vulnerabilities before proceeding"
              exit 1
            else
              echo "✅ FAIL_ON_VULNERABILITY is enabled but no critical/high vulnerabilities found"
            fi
          fi

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-image-results
          path: consolidated-image-results/
          retention-days: 90
          compression-level: 9

      - name: Upload consolidated SBOM
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-sbom-results
          path: |
            all-sbom-results/
            consolidated-image-results/all-sboms.tar.gz
          retention-days: 90
          compression-level: 9

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: consolidated-image-results/umbrella-chart-scan.sarif
          category: helm-umbrella-chart-containers

      - name: Comment container scan summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('consolidated-image-results/summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('❌ Summary file not found or error creating comment:', error);
            }

  scan-helm-configs:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download rendered manifests
        uses: actions/download-artifact@v4
        with:
          name: rendered-manifests
          path: ${{ env.RENDERED_OUTPUT_PATH }}

      - name: Scan Helm configurations with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ env.RENDERED_OUTPUT_PATH }}
          format: 'sarif'
          output: 'helm-config-scan.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Scan Helm configurations for summary
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ env.RENDERED_OUTPUT_PATH }}
          format: 'json'
          output: 'helm-config-scan.json'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Create config scan summary
        run: |
          echo "# 🛡️ Helm Configuration Scan Summary" > config-summary.md
          echo "" >> config-summary.md
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> config-summary.md
          echo "**Target:** Rendered Helm manifests" >> config-summary.md
          echo "" >> config-summary.md
          
          if [ -f helm-config-scan.json ]; then
            critical=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")] | length' helm-config-scan.json 2>/dev/null || echo "0")
            high=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH")] | length' helm-config-scan.json 2>/dev/null || echo "0")
            medium=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "MEDIUM")] | length' helm-config-scan.json 2>/dev/null || echo "0")
            
            echo "| Severity | Count |" >> config-summary.md
            echo "|----------|-------|" >> config-summary.md
            echo "| Critical | $critical |" >> config-summary.md
            echo "| High | $high |" >> config-summary.md
            echo "| Medium | $medium |" >> config-summary.md
            echo "" >> config-summary.md
            
            if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
              echo "⚠️ **Action Required:** Critical or High severity misconfigurations found." >> config-summary.md
            else
              echo "✅ **Good News:** No critical or high severity misconfigurations detected." >> config-summary.md
            fi
          else
            echo "❌ Configuration scan results not available." >> config-summary.md
          fi
          
          echo "" >> config-summary.md
          echo "📊 [View detailed results in Security tab](https://github.com/${{ github.repository }}/security/code-scanning)" >> config-summary.md

      - name: Upload Helm config SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: helm-config-scan.sarif
          category: helm-umbrella-chart-configs

      - name: Comment config scan summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('config-summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('❌ Config summary file not found or error creating comment:', error);
            }

      - name: Upload config scan results
        uses: actions/upload-artifact@v4
        with:
          name: helm-config-scan-results
          path: |
            helm-config-scan.sarif
            helm-config-scan.json
            config-summary.md
          retention-days: 30
          compression-level: 9

  notify-completion:
    needs: [prepare-scan, scan-images, consolidate-results, scan-helm-configs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.prepare-scan.result }}" == "failure" || 
                "${{ needs.scan-images.result }}" == "failure" || 
                "${{ needs.consolidate-results.result }}" == "failure" || 
                "${{ needs.scan-helm-configs.result }}" == "failure" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=🚨" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.prepare-scan.result }}" == "success" && 
                  "${{ needs.scan-images.result }}" == "success" && 
                  "${{ needs.consolidate-results.result }}" == "success" && 
                  "${{ needs.scan-helm-configs.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issue on failure
        if: steps.status.outputs.status == 'failed' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Helm Umbrella Chart Security Scan Failed';
            const body = `
            The automated security scan for the Helm umbrella chart has failed.
            
            **Workflow:** ${{ github.workflow }}
            **Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Triggered by:** ${{ github.event_name }}
            **Commit:** ${{ github.sha }}
            
            ## Job Results
            - **Prepare Scan:** ${{ needs.prepare-scan.result }}
            - **Image Scanning:** ${{ needs.scan-images.result }}
            - **Results Consolidation:** ${{ needs.consolidate-results.result }}
            - **Config Scanning:** ${{ needs.scan-helm-configs.result }}
            
            Please investigate and resolve the issues before proceeding.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automation-failure', 'helm']
            });

      - name: Summary output
        run: |
          echo "${{ steps.status.outputs.emoji }} Helm Security Scan completed with status: ${{ steps.status.outputs.status }}"
          echo "🔗 Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" > final_images.txt
          
          # Create JSON array for matrix strategy
          if [ -s final_images.txt ]; then
            images_json=$(jq -R -s -c 'split("\n") | map(select(length > 0))' final_images.txt)
            
            # Create matrix with chunking for better performance (max 8 images per job)
            # Using standard jq without custom functions - FIXED: floor division to avoid floating point
            matrix_json=$(echo "$images_json" | jq -c '
              [range(0; length; 8) as $i | 
                {
                  chunk: ($i / 8 | floor), 
                  images: .[$i:$i+8]
                }
              ]
            ')
            
            image_count=$(echo "$images_json" | jq 'length')
            echo "✅ Found ${image_count} unique container images"
          else
            echo "⚠️ No container images found in rendered templates"
            echo "🔧 This might be because:"
            echo "   - Templates failed to render completely"
            echo "   - Chart doesn't contain container workloads"
            echo "   - Images are referenced differently than expected"
            
            images_json='[]'
            matrix_json='[]'
          fi
          
          # Set outputs with explicit labels
          {
            echo "images=${images_json}"
            echo "matrix=${matrix_json}"
          } >> $GITHUB_OUTPUT
          
          # Debug output
          echo "=== Extracted Images ==="
          cat final_images.txt || echo "No images found"
          echo "======================="

      - name: Upload rendered manifests
        uses: actions/upload-artifact@v4
        with:
          name: rendered-manifests
          path: ${{ env.RENDERED_OUTPUT_PATH }}
          retention-days: 1
          compression-level: 9

  scan-images:
    needs: prepare-scan
    runs-on: ubuntu-latest
    if: needs.prepare-scan.outputs.images != '[]'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare-scan.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ github.run_id }}
          restore-keys: |
            trivy-db-

      - name: Scan container images for vulnerabilities
        run: |
          mkdir -p scan-results sbom-results
          
          # Convert matrix images to newline-separated format
          echo '${{ toJson(matrix.images) }}' | jq -r '.[]' > images_to_scan.txt
          
          echo "🔍 Scanning images in chunk ${{ matrix.chunk }}:"
          cat images_to_scan.txt
          
          # Scan each image
          while IFS= read -r image; do
            if [ -n "$image" ]; then
              echo "🔎 Scanning image: $image"
              
              # Create safe filename
              safe_name=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
              
              # Vulnerability scan with SARIF output
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/scan-results:/output" \
                aquasec/trivy:latest image \
                --format sarif \
                --output "/output/${safe_name}.sarif" \
                --severity HIGH,CRITICAL \
                --ignore-unfixed \
                --timeout 10m \
                "$image" || echo "❌ Failed to scan $image"
                
              # JSON output for summary
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/scan-results:/output" \
                aquasec/trivy:latest image \
                --format json \
                --output "/output/${safe_name}.json" \
                --severity HIGH,CRITICAL \
                --ignore-unfixed \
                --timeout 10m \
                "$image" || echo "❌ Failed to scan $image (JSON)"
                
              # Generate SBOM (SPDX format)
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/sbom-results:/output" \
                aquasec/trivy:latest image \
                --format spdx-json \
                --output "/output/${safe_name}-sbom-spdx.json" \
                "$image" || echo "❌ Failed to generate SPDX SBOM for $image"
                
              # Generate SBOM (CycloneDX format for broader tool compatibility)
              docker run --rm \
                -v ~/.cache/trivy:/root/.cache/trivy \
                -v "$(pwd)/sbom-results:/output" \
                aquasec/trivy:latest image \
                --format cyclonedx \
                --output "/output/${safe_name}-sbom-cyclone.json" \
                "$image" || echo "❌ Failed to generate CycloneDX SBOM for $image"
            fi
          done < images_to_scan.txt

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-chunk-${{ matrix.chunk }}
          path: scan-results/
          retention-days: 30
          compression-level: 9

      - name: Upload SBOM results
        uses: actions/upload-artifact@v4
        with:
          name: sbom-results-chunk-${{ matrix.chunk }}
          path: sbom-results/
          retention-days: 90
          compression-level: 9

  consolidate-results:
    needs: [prepare-scan, scan-images]
    runs-on: ubuntu-latest
    if: always() && needs.prepare-scan.outputs.images != '[]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          pattern: scan-results-chunk-*
          merge-multiple: true
          path: all-scan-results/

      - name: Download all SBOM results
        uses: actions/download-artifact@v4
        with:
          pattern: sbom-results-chunk-*
          merge-multiple: true
          path: all-sbom-results/

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install jq
          npm install -g @microsoft/sarif-multitool

      - name: Consolidate results
        run: |
          mkdir -p consolidated-image-results
          
          # Find all SARIF files
          find all-scan-results -name "*.sarif" > sarif_files.txt
          
          # Initialize vulnerability counters for workflow failure logic
          total_critical=0
          total_high=0
          
          if [ -s sarif_files.txt ]; then
            echo "📊 Consolidating SARIF files:"
            cat sarif_files.txt
            
            # Merge all SARIF files into one
            sarif merge $(cat sarif_files.txt) --output-file consolidated-image-results/umbrella-chart-scan.sarif
            
            # Create consolidated SBOM tarball with both formats
            if [ -d "all-sbom-results" ] && [ "$(ls -A all-sbom-results)" ]; then
              echo "📦 Creating consolidated SBOM archive..."
              tar -czf consolidated-image-results/all-sboms.tar.gz -C all-sbom-results .
              spdx_count=$(find all-sbom-results -name "*-sbom-spdx.json" | wc -l)
              cyclone_count=$(find all-sbom-results -name "*-sbom-cyclone.json" | wc -l)
              echo "✅ Archived ${spdx_count} SPDX and ${cyclone_count} CycloneDX SBOM files"
            fi
            
            # Create detailed summary
            {
              echo "# 🔍 Container Vulnerability Scan Summary"
              echo ""
              echo "**Chart:** ${{ needs.prepare-scan.outputs.chart-name }}"
              echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
              echo "**Trigger:** ${{ github.event_name }}"
              echo ""
              echo "## 📋 Results by Image"
              echo ""
              echo "| Image | Critical | High | Total | SPDX SBOM | CycloneDX SBOM |"
              echo "|-------|----------|------|-------|-----------|----------------|"
            } > consolidated-image-results/summary.md
            
            # Process JSON results for summary
            for json_file in all-scan-results/*.json; do
              if [ -f "$json_file" ]; then
                # Reconstruct image name from filename
                base_name=$(basename "$json_file" .json)
                image_name=$(echo "$base_name" | sed 's/_/\//g; s/\//:/1')
                
                critical=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$json_file" 2>/dev/null || echo "0")
                high=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$json_file" 2>/dev/null || echo "0")
                total=$((critical + high))
                
                # Add to global counters
                total_critical=$((total_critical + critical))
                total_high=$((total_high + high))
                
                # Check if SBOMs exist
                spdx_file="all-sbom-results/${base_name}-sbom-spdx.json"
                cyclone_file="all-sbom-results/${base_name}-sbom-cyclone.json"
                
                if [ -f "$spdx_file" ]; then
                  spdx_link="✅ \`${base_name}-sbom-spdx.json\`"
                else
                  spdx_link="❌"
                fi
                
                if [ -f "$cyclone_file" ]; then
                  cyclone_link="✅ \`${base_name}-sbom-cyclone.json\`"
                else
                  cyclone_link="❌"
                fi
                
                echo "| \`$image_name\` | $critical | $high | $total | $spdx_link | $cyclone_link |" >> consolidated-image-results/summary.md
              fi
            done
            
            {
              echo ""
              echo "## 🚨 Summary Totals"
              echo ""
              echo "- **Total Critical:** $total_critical"
              echo "- **Total High:** $total_high"
              echo "- **Overall Total:** $((total_critical + total_high))"
              echo ""
              echo "## 📎 Artifacts"
              echo ""
              echo "- 🔍 [Consolidated SARIF Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
              echo "- 📦 [All SBOMs Archive (all-sboms.tar.gz)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
              echo "- 🛡️ [Security Tab Results](https://github.com/${{ github.repository }}/security/code-scanning)"
              echo ""
              if [ -f "consolidated-image-results/all-sboms.tar.gz" ]; then
                echo "### 📋 SBOM Files Included:"
                echo "\`\`\`"
                tar -tzf consolidated-image-results/all-sboms.tar.gz | head -20
                if [ $(tar -tzf consolidated-image-results/all-sboms.tar.gz | wc -l) -gt 20 ]; then
                  echo "... and $(($(tar -tzf consolidated-image-results/all-sboms.tar.gz | wc -l) - 20)) more files"
                fi
                echo "\`\`\`"
                echo ""
              fi
              echo "---"
              echo "*Automated scan by [Helm Security Workflow](https://github.com/${{ github.repository }}/actions/workflows/${{ github.workflow }})*"
            } >> consolidated-image-results/summary.md
            
          else
            echo "⚠️ No SARIF files found to consolidate"
            # Create empty SARIF file
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": []}' > consolidated-image-results/umbrella-chart-scan.sarif
            echo "# ✅ No vulnerabilities found in container images" > consolidated-image-results/summary.md
          fi
          
          # Optional workflow failure on vulnerabilities
          if [ "${{ env.FAIL_ON_VULNERABILITY }}" = "true" ]; then
            if [ "$total_critical" -gt 0 ] || [ "$total_high" -gt 0 ]; then
              echo "❌ FAIL_ON_VULNERABILITY is enabled and vulnerabilities were found:"
              echo "   Critical: $total_critical, High: $total_high"
              echo "🛡️ Please resolve vulnerabilities before proceeding"
              exit 1
            else
              echo "✅ FAIL_ON_VULNERABILITY is enabled but no critical/high vulnerabilities found"
            fi
          fi

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-image-results
          path: consolidated-image-results/
          retention-days: 90
          compression-level: 9

      - name: Upload consolidated SBOM
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-sbom-results
          path: |
            all-sbom-results/
            consolidated-image-results/all-sboms.tar.gz
          retention-days: 90
          compression-level: 9

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: consolidated-image-results/umbrella-chart-scan.sarif
          category: helm-umbrella-chart-containers

      - name: Comment container scan summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('consolidated-image-results/summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('❌ Summary file not found or error creating comment:', error);
            }

  scan-helm-configs:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download rendered manifests
        uses: actions/download-artifact@v4
        with:
          name: rendered-manifests
          path: ${{ env.RENDERED_OUTPUT_PATH }}

      - name: Scan Helm configurations with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ env.RENDERED_OUTPUT_PATH }}
          format: 'sarif'
          output: 'helm-config-scan.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Scan Helm configurations for summary
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ env.RENDERED_OUTPUT_PATH }}
          format: 'json'
          output: 'helm-config-scan.json'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Create config scan summary
        run: |
          echo "# 🛡️ Helm Configuration Scan Summary" > config-summary.md
          echo "" >> config-summary.md
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> config-summary.md
          echo "**Target:** Rendered Helm manifests" >> config-summary.md
          echo "" >> config-summary.md
          
          if [ -f helm-config-scan.json ]; then
            critical=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")] | length' helm-config-scan.json 2>/dev/null || echo "0")
            high=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH")] | length' helm-config-scan.json 2>/dev/null || echo "0")
            medium=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "MEDIUM")] | length' helm-config-scan.json 2>/dev/null || echo "0")
            
            echo "| Severity | Count |" >> config-summary.md
            echo "|----------|-------|" >> config-summary.md
            echo "| Critical | $critical |" >> config-summary.md
            echo "| High | $high |" >> config-summary.md
            echo "| Medium | $medium |" >> config-summary.md
            echo "" >> config-summary.md
            
            if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
              echo "⚠️ **Action Required:** Critical or High severity misconfigurations found." >> config-summary.md
            else
              echo "✅ **Good News:** No critical or high severity misconfigurations detected." >> config-summary.md
            fi
          else
            echo "❌ Configuration scan results not available." >> config-summary.md
          fi
          
          echo "" >> config-summary.md
          echo "📊 [View detailed results in Security tab](https://github.com/${{ github.repository }}/security/code-scanning)" >> config-summary.md

      - name: Upload Helm config SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: helm-config-scan.sarif
          category: helm-umbrella-chart-configs

      - name: Comment config scan summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('config-summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('❌ Config summary file not found or error creating comment:', error);
            }

      - name: Upload config scan results
        uses: actions/upload-artifact@v4
        with:
          name: helm-config-scan-results
          path: |
            helm-config-scan.sarif
            helm-config-scan.json
            config-summary.md
          retention-days: 30
          compression-level: 9

  notify-completion:
    needs: [prepare-scan, scan-images, consolidate-results, scan-helm-configs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.prepare-scan.result }}" == "failure" || 
                "${{ needs.scan-images.result }}" == "failure" || 
                "${{ needs.consolidate-results.result }}" == "failure" || 
                "${{ needs.scan-helm-configs.result }}" == "failure" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=🚨" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.prepare-scan.result }}" == "success" && 
                  "${{ needs.scan-images.result }}" == "success" && 
                  "${{ needs.consolidate-results.result }}" == "success" && 
                  "${{ needs.scan-helm-configs.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issue on failure
        if: steps.status.outputs.status == 'failed' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Helm Umbrella Chart Security Scan Failed';
            const body = `
            The automated security scan for the Helm umbrella chart has failed.
            
            **Workflow:** ${{ github.workflow }}
            **Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Triggered by:** ${{ github.event_name }}
            **Commit:** ${{ github.sha }}
            
            ## Job Results
            - **Prepare Scan:** ${{ needs.prepare-scan.result }}
            - **Image Scanning:** ${{ needs.scan-images.result }}
            - **Results Consolidation:** ${{ needs.consolidate-results.result }}
            - **Config Scanning:** ${{ needs.scan-helm-configs.result }}
            
            Please investigate and resolve the issues before proceeding.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automation-failure', 'helm']
            });

      - name: Summary output
        run: |
          echo "${{ steps.status.outputs.emoji }} Helm Security Scan completed with status: ${{ steps.status.outputs.status }}"
          echo "🔗 Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
